
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/real/Moureze.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_real_Moureze.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_real_Moureze.py:


Moureze
~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 6-8

.. code-block:: python3

    import os








.. GENERATED FROM PYTHON SOURCE LINES 9-10

These two lines are necessary only if gempy is not installed

.. GENERATED FROM PYTHON SOURCE LINES 10-21

.. code-block:: python3


    # Importing gempy
    import gempy as gp
    import gempy_viewer as gpv

    # Aux imports
    import numpy as np
    import pandas as pd

    from gempy_engine.config import AvailableBackends








.. GENERATED FROM PYTHON SOURCE LINES 22-28

Loading surface points from repository:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

With pandas we can do it directly from the web and with the right args
we can directly tidy the data in gempy style:


.. GENERATED FROM PYTHON SOURCE LINES 30-51

.. code-block:: python3


    data_path = os.path.abspath('../../data/input_data/Moureze')
    Moureze_points = pd.read_csv(
        filepath_or_buffer=data_path + '/Moureze_Points.csv',
        sep=';',
        names=['X', 'Y', 'Z', 'G_x', 'G_y', 'G_z', '_'],
        header=0,
    )

    Sections_EW = pd.read_csv(
        filepath_or_buffer=data_path + '/Sections_EW.csv',
        sep=';',
        names=['X', 'Y', 'Z', 'ID', '_'], header=1
    ).dropna()

    Sections_NS = pd.read_csv(
        filepath_or_buffer=data_path + '/Sections_NS.csv',
        sep=';',
        names=['X', 'Y', 'Z', 'ID', '_'], header=1
    ).dropna()








.. GENERATED FROM PYTHON SOURCE LINES 52-54

Extracting the orientatins:


.. GENERATED FROM PYTHON SOURCE LINES 56-60

.. code-block:: python3

    mask_surfpoints = Moureze_points['G_x'] < -9999
    surface_points = Moureze_points[mask_surfpoints]
    orientations = Moureze_points[~mask_surfpoints]








.. GENERATED FROM PYTHON SOURCE LINES 61-63

Giving an arbitrary value name to the surface


.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. code-block:: python3

    surface_points['surface'] = '0'
    orientations['surface'] = '0'





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/leguark/gempy/examples/examples/real/Moureze.py:65: SettingWithCopyWarning: 
    A value is trying to be set on a copy of a slice from a DataFrame.
    Try using .loc[row_indexer,col_indexer] = value instead

    See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
      surface_points['surface'] = '0'
    /home/leguark/gempy/examples/examples/real/Moureze.py:66: SettingWithCopyWarning: 
    A value is trying to be set on a copy of a slice from a DataFrame.
    Try using .loc[row_indexer,col_indexer] = value instead

    See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
      orientations['surface'] = '0'




.. GENERATED FROM PYTHON SOURCE LINES 69-71

.. code-block:: python3

    surface_points.tail()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>X</th>
          <th>Y</th>
          <th>Z</th>
          <th>G_x</th>
          <th>G_y</th>
          <th>G_z</th>
          <th>_</th>
          <th>surface</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>3425</th>
          <td>177.428558</td>
          <td>155.904465</td>
          <td>-152.007</td>
          <td>-99999.0</td>
          <td>-99999.0</td>
          <td>-99999.0</td>
          <td>0.045217</td>
          <td>0</td>
        </tr>
        <tr>
          <th>3426</th>
          <td>89.924927</td>
          <td>86.352005</td>
          <td>-120.026</td>
          <td>-99999.0</td>
          <td>-99999.0</td>
          <td>-99999.0</td>
          <td>0.067264</td>
          <td>0</td>
        </tr>
        <tr>
          <th>3427</th>
          <td>75.935799</td>
          <td>116.717010</td>
          <td>-140.023</td>
          <td>-99999.0</td>
          <td>-99999.0</td>
          <td>-99999.0</td>
          <td>0.783988</td>
          <td>0</td>
        </tr>
        <tr>
          <th>3428</th>
          <td>177.964096</td>
          <td>233.829971</td>
          <td>-148.831</td>
          <td>-99999.0</td>
          <td>-99999.0</td>
          <td>-99999.0</td>
          <td>0.523201</td>
          <td>0</td>
        </tr>
        <tr>
          <th>3429</th>
          <td>46.487995</td>
          <td>17.739241</td>
          <td>-148.019</td>
          <td>-99999.0</td>
          <td>-99999.0</td>
          <td>-99999.0</td>
          <td>0.110549</td>
          <td>0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 72-74

.. code-block:: python3

    orientations.tail()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>X</th>
          <th>Y</th>
          <th>Z</th>
          <th>G_x</th>
          <th>G_y</th>
          <th>G_z</th>
          <th>_</th>
          <th>surface</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>3409</th>
          <td>47.970890</td>
          <td>129.885971</td>
          <td>-132.010</td>
          <td>-0.453523</td>
          <td>-0.849487</td>
          <td>0.269609</td>
          <td>0.016933</td>
          <td>0</td>
        </tr>
        <tr>
          <th>3420</th>
          <td>175.944580</td>
          <td>293.731140</td>
          <td>-138.019</td>
          <td>0.217228</td>
          <td>-0.884429</td>
          <td>0.413035</td>
          <td>0.444558</td>
          <td>0</td>
        </tr>
        <tr>
          <th>3421</th>
          <td>203.969635</td>
          <td>367.725098</td>
          <td>-150.011</td>
          <td>0.217373</td>
          <td>-0.971044</td>
          <td>-0.099104</td>
          <td>0.708855</td>
          <td>0</td>
        </tr>
        <tr>
          <th>3422</th>
          <td>133.925903</td>
          <td>225.623962</td>
          <td>-146.756</td>
          <td>0.318182</td>
          <td>-0.872684</td>
          <td>-0.370381</td>
          <td>0.126039</td>
          <td>0</td>
        </tr>
        <tr>
          <th>3430</th>
          <td>290.000000</td>
          <td>180.000000</td>
          <td>-103.539</td>
          <td>0.126294</td>
          <td>-0.192654</td>
          <td>0.973105</td>
          <td>0.679096</td>
          <td>0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 75-86

Data initialization:
~~~~~~~~~~~~~~~~~~~~

Suggested size of the axis-aligned modeling box:

Origin: -5 -5 -200

Maximum: 305 405 -50

Suggested resolution: 2m (grid size 156 x 206 x 76)


.. GENERATED FROM PYTHON SOURCE LINES 89-92

Only using one orientation because otherwhise it gets a mess
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 94-95

Number voxels

.. GENERATED FROM PYTHON SOURCE LINES 95-97

.. code-block:: python3

    np.array([156, 206, 76]).prod()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2442336



.. GENERATED FROM PYTHON SOURCE LINES 98-134

.. code-block:: python3

    resolution_requ = [156, 206, 76]
    resolution = [77, 103, 38]
    resolution_low = [45, 51, 38]


    surface_points_table: gp.data.SurfacePointsTable = gp.data.SurfacePointsTable.from_arrays(
        x=surface_points['X'].values,
        y=surface_points['Y'].values,
        z=surface_points['Z'].values,
        names=surface_points['surface'].values.astype(str)
    )

    orientations_table: gp.data.OrientationsTable = gp.data.OrientationsTable.from_arrays(
        x=orientations['X'].values,
        y=orientations['Y'].values,
        z=orientations['Z'].values,
        G_x=orientations['G_x'].values,
        G_y=orientations['G_y'].values,
        G_z=orientations['G_z'].values,
        names=orientations['surface'].values.astype(str),
        name_id_map=surface_points_table.name_id_map  # ! Make sure that ids and names are shared
    )

    structural_frame: gp.data.StructuralFrame = gp.data.StructuralFrame.from_data_tables(
        surface_points=surface_points_table,
        orientations=orientations_table
    )

    geo_model: gp.data.GeoModel = gp.create_geomodel(
        project_name='Moureze',
        extent=[-5, 305, -5, 405, -200, -50],
        resolution=resolution_low,
        refinement=1,
        structural_frame=structural_frame
    )








.. GENERATED FROM PYTHON SOURCE LINES 135-137

Now we can see how the data looks so far:


.. GENERATED FROM PYTHON SOURCE LINES 139-142

.. code-block:: python3

    gpv.plot_2d(geo_model, direction='y')





.. image-sg:: /examples/real/images/sphx_glr_Moureze_001.png
   :alt: Cell Number: mid Direction: y
   :srcset: /examples/real/images/sphx_glr_Moureze_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_2d.visualization_2d.Plot2D object at 0x7f549ebe4a00>



.. GENERATED FROM PYTHON SOURCE LINES 143-147

The default range is always the diagonal of the extent. Since in this
model data is very close we will need to reduce the range to 5-10% of
that value:


.. GENERATED FROM PYTHON SOURCE LINES 149-150

.. code-block:: python3

    geo_model.interpolation_options.kernel_options.range *= 0.2







.. GENERATED FROM PYTHON SOURCE LINES 151-157

.. code-block:: python3

    gp.compute_model(
        gempy_model=geo_model,
        engine_config=gp.data.GemPyEngineConfig(use_gpu=True, dtype='float64', backend=AvailableBackends.numpy)
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Setting Backend To: AvailableBackends.numpy
    A size: (4783, 4783)
    CG iterations: 100
    /home/leguark/gempy_engine/gempy_engine/API/dual_contouring/multi_scalar_dual_contouring.py:48: UserWarning: Fancy triangulation only works with regular grid of resolution [2,2,2]. Defaulting to regular triangulation
      warnings.warn("Fancy triangulation only works with regular grid of resolution [2,2,2]. Defaulting to regular triangulation")


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <b>Solutions:</b> 1 Octree Levels, 1 DualContouringMeshes
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 158-183

Time
~~~~

300k voxels 3.5k points
^^^^^^^^^^^^^^^^^^^^^^^

-  Nvidia 2080: 500 ms ± 1.3 ms per loop (mean ± std. dev. of 7 runs, 1
   loop each), Memory 1 Gb
-  CPU 14.2 s ± 82.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop
   each), Memory: 1.3 Gb

2.4 M voxels, 3.5k points
^^^^^^^^^^^^^^^^^^^^^^^^^

-  CPU 2min 33s ± 216 ms per loop (mean ± std. dev. of 7 runs, 1 loop
   each) Memory: 1.3 GB
-  Nvidia 2080: 1.92 s ± 6.74 ms per loop (mean ± std. dev. of 7 runs, 1
   loop each) 1 Gb

2.4 M voxels, 3.5k points 3.5 k orientations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-  Nvidia 2080: 2.53 s ± 1.31 ms per loop (mean ± std. dev. of 7 runs, 1
   loop each)


.. GENERATED FROM PYTHON SOURCE LINES 185-187

.. code-block:: python3


    gpv.plot_2d(geo_model, cell_number='mid', series_n=0, show_scalar=True)



.. image-sg:: /examples/real/images/sphx_glr_Moureze_002.png
   :alt: Cell Number: mid Direction: y
   :srcset: /examples/real/images/sphx_glr_Moureze_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_2d.visualization_2d.Plot2D object at 0x7f549ed93ca0>



.. GENERATED FROM PYTHON SOURCE LINES 188-190

.. code-block:: python3

    gpv.plot_2d(geo_model, cell_number='mid', show_data=True, direction='y')




.. image-sg:: /examples/real/images/sphx_glr_Moureze_003.png
   :alt: Cell Number: mid Direction: y
   :srcset: /examples/real/images/sphx_glr_Moureze_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_2d.visualization_2d.Plot2D object at 0x7f549ef8d7b0>



.. GENERATED FROM PYTHON SOURCE LINES 191-192

sphinx_gallery_thumbnail_number = 4

.. GENERATED FROM PYTHON SOURCE LINES 192-193

.. code-block:: python3

    gpv.plot_3d(geo_model)



.. image-sg:: /examples/real/images/sphx_glr_Moureze_004.png
   :alt: Moureze
   :srcset: /examples/real/images/sphx_glr_Moureze_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_3d.vista.GemPyToVista object at 0x7f549e6da320>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  31.252 seconds)


.. _sphx_glr_download_examples_real_Moureze.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: Moureze.py <Moureze.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: Moureze.ipynb <Moureze.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
