
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/a_getting_started/get_started.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_a_getting_started_get_started.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_a_getting_started_get_started.py:


Getting Started
===============

.. GENERATED FROM PYTHON SOURCE LINES 9-19

.. code-block:: python3


    # Importing GemPy and viewer
    import gempy as gp
    import gempy_viewer as gpv

    # Auxiliary libraries
    import numpy as np
    import matplotlib.pyplot as plt
    import matplotlib.image as mpimg








.. GENERATED FROM PYTHON SOURCE LINES 20-28

Initializing the model:
~~~~~~~~~~~~~~~~~~~~~~~

Create a gempy.Model object. This object will contain all other data structures
and necessary functionality. We'll also define a regular grid for this example.
This grid will be used for interpolating the 3D geological model. GemPy offers
different grids for various purposes. For visualization, a regular grid is most
appropriate. 

.. GENERATED FROM PYTHON SOURCE LINES 30-39

.. code-block:: python3

    geo_model: gp.data.GeoModel = gp.create_geomodel(
        project_name='Model1',
        extent=[0, 791, -200, 200, -582, 0],
        resolution=[50, 50, 50],
        refinement=4,
        structural_frame=gp.data.StructuralFrame.initialize_default_structure()
    )
    geo_model





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'grid': <gempy.core.data.grid.Grid object at 0x7f44f0dd0490>,
     'interpolation_options': InterpolationOptions(kernel_options={'range': 5, 'c_o': 10, 'uni_degree': 1, 'i_res': 4, 'gi_res': 2, 'number_dimensions': 3, 'kernel_function': <AvailableKernelFunctions.cubic: KernelFunction(base_function=<function cubic_function at 0x7f4546ac7910>, derivative_div_r=<function cubic_function_p_div_r at 0x7f4546ac79a0>, second_derivative=<function cubic_function_a at 0x7f4546ac7a30>, consume_sq_distance=False)>, 'compute_condition_number': False, 'kernel_solver': <Solvers.DEFAULT: 1>}, number_octree_levels=4, current_octree_level=0, compute_scalar_gradient=False, mesh_extraction=True, mesh_extraction_masking_options=MeshExtractionMaskingOptions.INTERSECT, mesh_extraction_fancy=True, debug=True, debug_water_tight=False, _number_octree_levels_surface=4),
     'meta': GeoModelMeta(name='Model1',
                          creation_date=None,
                          last_modification_date=None,
                          owner=None),
     'structural_frame': StructuralFrame(
    	structural_groups=[
    StructuralGroup(
    	name=default_formations,
    	structural_relation=StackRelationType.ERODE,
    	elements=[
    Element(
    	name=surface1,
    	color=#015482,
    	is_active=True
    )
    ]
    )
    ],
    	fault_relations=
    [[False]],
    ,
     'transform': {'_is_default_transform': True,
     'position': array([0., 0., 0.]),
     'rotation': array([0., 0., 0.]),
     'scale': array([1., 1., 1.])}}



.. GENERATED FROM PYTHON SOURCE LINES 40-47

Creating a figure:
~~~~~~~~~~~~~~~~~~

GemPy utilizes matplotlib for 2D and pyvista-vtk for 3D visualizations. 
One design goal of GemPy is real-time model construction. This means as input data
is added, you can see the 3D surfaces update in real-time. Let's initialize 
the visualization windows. First, the 2D figure:

.. GENERATED FROM PYTHON SOURCE LINES 49-51

.. code-block:: python3

    p2d = gpv.plot_2d(geo_model)




.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_001.png
   :alt: Cell Number: mid Direction: y
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 52-57

Adding a model section:
^^^^^^^^^^^^^^^^^^^^^^^

In the 2D renderer, we can add several cross sections of the model. 
For simplicity, we'll add just one, perpendicular to y.

.. GENERATED FROM PYTHON SOURCE LINES 59-64

Loading a cross-section image:
------------------------------

GemPy uses standard matplotlib axes, allowing for flexibility. 
Let's load an image showing the details of a couple of boreholes:

.. GENERATED FROM PYTHON SOURCE LINES 66-71

.. code-block:: python3

    img = mpimg.imread('wells.png')
    p2d = gpv.plot_2d(geo_model, show=False)
    p2d.axes[0].imshow(img, origin='upper', alpha=.8, extent=(0, 791, -582, 0))
    plt.show()




.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_002.png
   :alt: Cell Number: mid Direction: y
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 72-73

Similarly, we can visualize in 3D using pyvista and vtk:

.. GENERATED FROM PYTHON SOURCE LINES 75-77

.. code-block:: python3

    p3d = gpv.plot_3d(geo_model, image=True)




.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_003.png
   :alt: get started
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_003.png
   :class: sphx-glr-single-img

.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_004.png
   :alt: get started
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 78-88

Building the model:
-------------------

With everything initialized, we can begin constructing the geological model.

Surfaces:
~~~~~~~~~

GemPy is a surface-based interpolator. All input data must be referred to a 
surface, which marks the bottom of a unit. By default, GemPy surfaces are empty:

.. GENERATED FROM PYTHON SOURCE LINES 90-92

.. code-block:: python3

    geo_model.structural_frame.structural_elements





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [Element(
    	name=surface1,
    	color=#015482,
    	is_active=True
    ), Element(
    	name=basement,
    	color=#9f0052,
    	is_active=True
    )]



.. GENERATED FROM PYTHON SOURCE LINES 93-96

Let's begin by adding data. GemPy input data consists of surface points and 
orientations (perpendicular to the layers). The 2D plot provides X and Z 
coordinates on mouse hover (in qt5 backend). We can add a surface point like this:

.. GENERATED FROM PYTHON SOURCE LINES 98-109

.. code-block:: python3

    gp.add_surface_points(
        geo_model=geo_model,
        x=[223],
        y=[0.01],
        z=[-94],
        elements_names=['surface1']
    )

    gpv.plot_2d(geo_model, cell_number=11)
    gpv.plot_3d(geo_model, image=True)




.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_005.png
   :alt: get started
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_005.png
   :class: sphx-glr-single-img

.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_006.png
   :alt: Cell Number: 11 Direction: y
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_3d.vista.GemPyToVista object at 0x7f44f0a3d120>



.. GENERATED FROM PYTHON SOURCE LINES 110-111

We can now add other points for the layer:

.. GENERATED FROM PYTHON SOURCE LINES 113-124

.. code-block:: python3

    gp.add_surface_points(
        geo_model=geo_model,
        x=[458, 612],
        y=[0, 0],
        z=[-107, -14],
        elements_names=['surface1', 'surface1']
    )

    gpv.plot_2d(geo_model, cell_number=11)
    gpv.plot_3d(geo_model, image=True)




.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_007.png
   :alt: get started
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_007.png
   :class: sphx-glr-single-img

.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_008.png
   :alt: Cell Number: 11 Direction: y
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_3d.vista.GemPyToVista object at 0x7f44f09f1d80>



.. GENERATED FROM PYTHON SOURCE LINES 125-132

To interpolate in gempy, the minimum data needed is:

  a) 2 surface points per surface 

  b) One orientation per series

Let's add an orientation:

.. GENERATED FROM PYTHON SOURCE LINES 134-148

.. code-block:: python3

    gp.add_orientations(
        geo_model=geo_model,
        x=[350],
        y=[1],
        z=[-300],
        elements_names=['surface1'],
        pole_vector=[[0, 0, 1]]
    )

    gpv.plot_2d(geo_model, cell_number=5)
    gpv.plot_3d(geo_model, image=True)






.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_009.png
   :alt: get started
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_009.png
   :class: sphx-glr-single-img

.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_010.png
   :alt: Cell Number: 5 Direction: y
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_010.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_3d.vista.GemPyToVista object at 0x7f44ed6a7ca0>



.. GENERATED FROM PYTHON SOURCE LINES 149-152

Update and Recompute Model Transform:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Removing auto anisotropy for this 2.5D model.

.. GENERATED FROM PYTHON SOURCE LINES 152-154

.. code-block:: python3

    geo_model.update_transform(gp.data.GlobalAnisotropy.NONE)








.. GENERATED FROM PYTHON SOURCE LINES 155-158

Interpolation:
~~~~~~~~~~~~~~
With the provided data, we can now interpolate the 3D surface.

.. GENERATED FROM PYTHON SOURCE LINES 158-161

.. code-block:: python3


    gp.compute_model(geo_model, engine_config=gp.data.GemPyEngineConfig())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Setting Backend To: AvailableBackends.numpy
    /home/leguark/gempy/gempy/core/data/geo_model.py:164: UserWarning: You are using octrees and passing a regular grid. The resolution of the regular grid will be overwritten
      warnings.warn(


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <b>Solutions:</b> 4 Octree Levels, 1 DualContouringMeshes
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 162-163

Display interpolation kernel options:

.. GENERATED FROM PYTHON SOURCE LINES 163-165

.. code-block:: python3

    geo_model.interpolation_options.kernel_options






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

                <table>
                    <tr><td colspan='2' style='text-align:center'><b>KernelOptions</b></td></tr>
                    <tr><td>range</td><td>5</td></tr><tr><td>c_o</td><td>10</td></tr><tr><td>uni_degree</td><td>1</td></tr><tr><td>i_res</td><td>4</td></tr><tr><td>gi_res</td><td>2</td></tr><tr><td>number_dimensions</td><td>3</td></tr><tr><td>kernel_function</td><td>AvailableKernelFunctions.cubic</td></tr><tr><td>compute_condition_number</td><td>False</td></tr><tr><td>kernel_solver</td><td>Solvers.DEFAULT</td></tr>
                </table>
            
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 166-169

Visualization:
~~~~~~~~~~~~~~
Interpolated 3D surface can be visualized both in 2D and 3D.

.. GENERATED FROM PYTHON SOURCE LINES 169-176

.. code-block:: python3


    # 2D visualization:
    gpv.plot_2d(geo_model, cell_number=[5])

    # 3D visualization:
    gpv.plot_3d(geo_model, show_surfaces=True, image=True)




.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_011.png
   :alt: get started
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_011.png
   :class: sphx-glr-single-img

.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_012.png
   :alt: Cell Number: 5 Direction: y
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_012.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_3d.vista.GemPyToVista object at 0x7f44ed712530>



.. GENERATED FROM PYTHON SOURCE LINES 177-180

Expanding the Model with More Layers:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Our cross-section image displays 4 layers, yet we only defined 2. Let's add two more.

.. GENERATED FROM PYTHON SOURCE LINES 180-184

.. code-block:: python3


    # Display current structural frame:
    geo_model.structural_frame






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

            <table>
              <tr><td>Structural Groups:</td><td>
        <table style="border-left:1.2px solid black;>
          <tr><th colspan="2"><b>StructuralGroup:</b></th></tr>
          <tr><td>Name:</td><td>default_formations</td></tr>
          <tr><td>Structural Relation:</td><td>StackRelationType.ERODE</td></tr>
          <tr><td>Elements:</td><td>
        <table width="50%" style="border-left:15px solid #015482;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>surface1</td></tr>
        </table>
            </td></tr>
        </table>
            </td></tr>
              <tr><td>Fault Relations:</td><td><table style="border-collapse: collapse; table-layout: fixed;"><th></th><th style="transform: rotate(-35deg); height:150px; vertical-align: bottom; text-align: center;">default_fo...</th><tr><th>default_formations</th><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td></tr></table></td></tr>
              <tr><td></td><td>
            <table>
              <tr>
                <td><div style="display: inline-block; background-color: #527682; width: 20px; height: 20px; border: 1px solid black;"></div> True</td>
                <td><div style="display: inline-block; background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></div> False</td>
              </tr>
            </table>
            </td></tr>
            </table>
        
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 185-188

Defining Layer 2:
~~~~~~~~~~~~~~~~~
Adding points and properties for the next layer.

.. GENERATED FROM PYTHON SOURCE LINES 188-208

.. code-block:: python3


    element2 = gp.data.StructuralElement(
        name='surface2',
        color=next(geo_model.structural_frame.color_generator),
        surface_points=gp.data.SurfacePointsTable.from_arrays(
            x=np.array([225, 459]),
            y=np.array([0, 0]),
            z=np.array([-269, -279]),
            names='surface2'
        ),
        orientations=gp.data.OrientationsTable.initialize_empty()
    )

    geo_model.structural_frame.structural_groups[0].append_element(element2)

    # Compute and visualize the updated model:
    gp.compute_model(geo_model)
    gpv.plot_2d(geo_model, cell_number=5, legend='force')
    gpv.plot_3d(geo_model, image=True)




.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_013.png
   :alt: get started
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_013.png
   :class: sphx-glr-single-img

.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_014.png
   :alt: Cell Number: 5 Direction: y
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_014.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Setting Backend To: AvailableBackends.numpy

    <gempy_viewer.modules.plot_3d.vista.GemPyToVista object at 0x7f44f0793430>



.. GENERATED FROM PYTHON SOURCE LINES 209-212

Defining Layer 3:
~~~~~~~~~~~~~~~~~
Adding points and properties for another layer.

.. GENERATED FROM PYTHON SOURCE LINES 212-233

.. code-block:: python3


    element3 = gp.data.StructuralElement(
        name='surface3',
        color=next(geo_model.structural_frame.color_generator),
        surface_points=gp.data.SurfacePointsTable.from_arrays(
            x=np.array([225, 464, 619]),
            y=np.array([0, 0, 0]),
            z=np.array([-439, -456, -433]),
            names='surface3'
        ),
        orientations=gp.data.OrientationsTable.initialize_empty()
    )

    geo_model.structural_frame.structural_groups[0].append_element(element3)

    # Compute and visualize with adjusted parameters:
    gp.compute_model(geo_model)
    gpv.plot_2d(geo_model, cell_number=5, legend='force')
    gpv.plot_3d(geo_model, kwargs_plot_structured_grid={'opacity': .2}, image=True)





.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_015.png
   :alt: get started
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_015.png
   :class: sphx-glr-single-img

.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_016.png
   :alt: Cell Number: 5 Direction: y
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_016.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Setting Backend To: AvailableBackends.numpy

    <gempy_viewer.modules.plot_3d.vista.GemPyToVista object at 0x7f44f0614eb0>



.. GENERATED FROM PYTHON SOURCE LINES 234-241

Adding a Fault:
~~~~~~~~~~~~~~~
To date, our model represents a simple depositional unit. With GemPy, we can
incorporate unconformities and faults for more intricate models. 
Relationships are depicted as:
input data (surface points/ orientations) <belong to< surface <belong to< series.
Here, we'll add a fault as a demonstration. 

.. GENERATED FROM PYTHON SOURCE LINES 243-244

Add the fault's input data:

.. GENERATED FROM PYTHON SOURCE LINES 244-277

.. code-block:: python3

    element_fault = gp.data.StructuralElement(
        name='fault1',
        color=next(geo_model.structural_frame.color_generator),
        surface_points=gp.data.SurfacePointsTable.from_arrays(
            x=np.array([550, 650]),
            y=np.array([0, 0]),
            z=np.array([-30, -200]),
            names='fault1'
        ),
        orientations=gp.data.OrientationsTable.from_arrays(
            x=np.array([600]),
            y=np.array([0]),
            z=np.array([-100]),
            G_x=np.array([.3]),
            G_y=np.array([0]),
            G_z=np.array([.3]),
            names='fault1'
        )
    )

    group_fault = gp.data.StructuralGroup(
        name='Fault1',
        elements=[element_fault],
        structural_relation=gp.data.StackRelationType.FAULT,
        fault_relations=gp.data.FaultsRelationSpecialCase.OFFSET_ALL
    )

    # Insert the fault group into the structural frame:
    geo_model.structural_frame.insert_group(0, group_fault)

    # Preview the model's input data:
    gpv.plot_2d(geo_model, show_results=False)




.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_017.png
   :alt: Cell Number: mid Direction: y
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_017.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_2d.visualization_2d.Plot2D object at 0x7f44f0633340>



.. GENERATED FROM PYTHON SOURCE LINES 278-279

Compute and visualize the updated model:

.. GENERATED FROM PYTHON SOURCE LINES 279-283

.. code-block:: python3

    gp.compute_model(geo_model)
    gpv.plot_2d(geo_model, cell_number=5, legend='force')
    gpv.plot_3d(geo_model, kwargs_plot_structured_grid={'opacity': .2})




.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_018.png
   :alt: get started
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_018.png
   :class: sphx-glr-single-img

.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_019.png
   :alt: Cell Number: 5 Direction: y
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_019.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Setting Backend To: AvailableBackends.numpy

    <gempy_viewer.modules.plot_3d.vista.GemPyToVista object at 0x7f44f0803a30>



.. GENERATED FROM PYTHON SOURCE LINES 284-288

Advanced Features:
~~~~~~~~~~~~~~~~~~
Over time, numerous capabilities have been integrated with GemPy. 
Here, we'll showcase a few of them.

.. GENERATED FROM PYTHON SOURCE LINES 288-308

.. code-block:: python3


    # Topography:
    # GemPy offers built-in tools to manage topographic data through gdal.
    # For demonstration, we'll create a random topography:

    gp.set_topography_from_random(
        grid=geo_model.grid,
        fractal_dimension=1.9,
        d_z=np.array([-150, 0]),
        topography_resolution=np.array([200, 200])
    )

    # Visualize the topography:
    gpv.plot_2d(geo_model, cell_number=5, legend='force')
    gpv.plot_3d(geo_model, kwargs_plot_structured_grid={'opacity': .2})

    # Calculate and visualize the area's geological map:
    gp.compute_model(geo_model)
    gpv.plot_3d(geo_model, show_topography=True)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_020.png
          :alt: get started
          :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_020.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_021.png
          :alt: get started
          :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_021.png
          :class: sphx-glr-multi-img

.. image-sg:: /tutorials/a_getting_started/images/sphx_glr_get_started_022.png
   :alt: Cell Number: 5 Direction: y
   :srcset: /tutorials/a_getting_started/images/sphx_glr_get_started_022.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Active grids: ['topography']
    Setting Backend To: AvailableBackends.numpy

    <gempy_viewer.modules.plot_3d.vista.GemPyToVista object at 0x7f44f06bee90>



.. GENERATED FROM PYTHON SOURCE LINES 309-315

Gravity Inversion:
------------------

.. admonition:: Coming soon: Gravity inversion

    This feature is not yet available in the current version of GemPy.

.. GENERATED FROM PYTHON SOURCE LINES 317-331

Assign density values to model units:
geo_model.add_surface_values([0, 2.6, 2.4, 3.2, 3.6], ['density'])

Generate a centered grid around a device for improved accuracy:
geo_model.set_centered_grid(centers=[[400, 0, 0]], resolution=[10, 10, 100], radius=800)

Adjust the compile code for gravity computation:
gp.set_interpolator(geo_model, output=['gravity'], aesara_optimizer='fast_run')

Besides the interpolation, compute the model's forward gravity:
gp.compute_model(geo_model)
geo_model.solutions.fw_gravity

sphinx_gallery_thumbnail_number = -2


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.917 seconds)


.. _sphx_glr_download_tutorials_a_getting_started_get_started.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: get_started.py <get_started.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: get_started.ipynb <get_started.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
